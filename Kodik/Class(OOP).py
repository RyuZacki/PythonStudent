#-----------------------------------------------------------------------------------------------------------------------
#                                                  ООП Python
#-----------------------------------------------------------------------------------------------------------------------

"""Создание класса"""
class Car:  # <-- Создание
    model = "BMW"
    engine = 1.6

a = Car()  # <-- Создание экземпляра класса (к переменной a присвоили класс Car())

#-----------------------------------------------------------------------------------------------------------------------

""" Атрибуты класса """
class Person:
    """ Созданные нами атрибуты класса """
    name = 'Ivan'
    age = 30

getattr(Person, 'name') # Обращение к атрибуту (Person.name)
Person.name = 'Misha'
Person.aa = 200 # Если присвоить значение к не сушествующему атрибуту, то питон добавит этот атрибут в класс
setattr(Person, 'aa', 250) # Изменение атрибута Person.aa = 250
Person.bb = 10
del Person.aa # Удаление атрибута aa
delattr(Person, 'bb') # Так же удаление

#-----------------------------------------------------------------------------------------------------------------------

""" Атрибуты экземпляра класса """
class Car2:
    model1 = "BMW"
    engine1 = 1.6

a1 = Car2()
a2 = Car2()

a1.seat = 4 # Создал атрибут для экземпляра класса
a1.model = 'Lada'

a2.size = 80
Car2.r = 100

#-----------------------------------------------------------------------------------------------------------------------

""" Функция как атрибут класса """
class Car3:
    model2 = "BMW"
    engine2 = 1.6

    @staticmethod
    def drive(): # Функция внутри класса
        print("Let's go")

Car3.drive() # Вызов функции через класс
getattr(Car3, 'drive')() # Вызов функции через класс

b6 = Car3()
b6.drive()

#-----------------------------------------------------------------------------------------------------------------------

""" Методы класса, параметр self """
class Point:
    def __init__(self, x, y): # <-- Метод __init__ (Конструктор)
        print("Создание экземпляра класса Point")
        self.x = x
        self.y = y

    def __del__(self): # <-- Метод __del__ (Деструктор)
        print("Удаление экземпляра: " + self.__str__())

    """ Создание метода """
    def setCoords1(self): # <-- Метод
        print(self.__dict__)

    def setCoords2(self, x, y): # <-- Метод
        print(self.__dict__)
        self.a = x
        self.b = y

pt = Point(5, 10)
#pt.x = 5
#pt.y = 10
pt.setCoords1()
pt.setCoords2(7, 13)

#-----------------------------------------------------------------------------------------------------------------------


